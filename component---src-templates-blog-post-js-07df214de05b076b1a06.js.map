{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["Bio","style","display","marginBottom","rhythm","BlogPostTemplate","componentDidMount","name","timeout","Promise","resolve","reject","waited","wait","interval","setTimeout","undefined","window","message","then","top","MathJax","Hub","Config","tex2jax","inlineMath","displayMath","processEscapes","processEnvironments","skipTags","TeX","equationNumbers","autoNumber","extensions","Queue","componentDidUpdate","render","post","this","props","data","markdownRemark","siteTitle","site","siteMetadata","title","pageContext","previous","next","location","frontmatter","description","excerpt","type","src","async","marginTop","scale","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","React","Component","pageQuery"],"mappings":"iLA2EeA,EA9DH,WAEA,OAqBV,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,OAkBvB,yCACa,uD,gEC1BbC,E,wLACJC,kBAAA,WAzBF,IAAuBC,EAAMC,GAAND,EA0BL,eA1B0B,IAAfC,MAAU,KAC9B,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAIC,EAAS,GAEb,SAASC,EAAKC,GACZC,YAAW,WAIT,OAHAH,GAAUE,OAGWE,IAAjBC,OAAOV,GACFG,IAELE,GAAoB,IAAVJ,EACLG,EAAO,CAAEO,QAAS,iBAE3BL,EAAgB,EAAXC,KACJA,GAGLD,CAAK,QAOoBM,MAAK,WAC5BC,IAAIC,QAAQC,IAAIC,OAAO,CACrBC,QAAS,CACPC,WAAY,CAAC,CAAC,IAAK,KAAM,CAAC,MAAO,QACjCC,YAAa,CAAC,CAAC,KAAM,MAAO,CAAC,IAAK,MAClCC,gBAAgB,EAChBC,qBAAqB,EACrBC,SAAU,CAAC,SAAU,WAAY,QAAS,WAAY,OACtDC,IAAK,CACHC,gBAAiB,CAAEC,WAAY,OAC/BC,WAAY,CAAC,aAAc,wBAKhB,MAAfb,IAAIC,SACND,IAAIC,QAAQC,IAAIY,MAAM,CAAC,UAAWd,IAAIC,QAAQC,O,EAIlDa,mBAAA,WACqB,MAAff,IAAIC,SACND,IAAIC,QAAQC,IAAIY,MAAM,CAAC,UAAWd,IAAIC,QAAQC,O,EAIlDc,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,eACvBC,EAAYJ,KAAKC,MAAMC,KAAKG,KAAKC,aAAaC,MAF7C,EAGoBP,KAAKC,MAAMO,YAA9BC,EAHD,EAGCA,SAAUC,EAHX,EAGWA,KAElB,OACE,kBAAC,IAAD,CAAQC,SAAUX,KAAKC,MAAMU,SAAUJ,MAAOH,GAC5C,kBAAC,IAAD,CACEG,MAAOR,EAAKa,YAAYL,MACxBM,YAAad,EAAKa,YAAYC,aAAed,EAAKe,UAEpD,kBAAC,IAAD,KACE,4BACEC,KAAK,kBACLC,IAAI,+FACJC,OAAK,KAGT,iCACE,gCACE,wBACEtD,MAAO,CACLuD,UAAWpD,YAAO,GAClBD,aAAc,IAGfkC,EAAKa,YAAYL,OAEpB,uBACE5C,MAAK,iBACAwD,aAAM,IADN,CAEHvD,QAAQ,QACRC,aAAcC,YAAO,MAGtBiC,EAAKa,YAAYQ,OAGtB,6BAASC,wBAAyB,CAAEC,OAAQvB,EAAKwB,QACjD,wBACE5D,MAAO,CACLE,aAAcC,YAAO,MAGzB,gCACE,kBAAC,EAAD,QAIJ,6BACE,wBACEH,MAAO,CACLC,QAAQ,OACR4D,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGlB,GACC,kBAAC,OAAD,CAAMmB,GAAInB,EAASoB,OAAOC,KAAMC,IAAI,QAApC,KACKtB,EAASG,YAAYL,QAI9B,4BACGG,GACC,kBAAC,OAAD,CAAMkB,GAAIlB,EAAKmB,OAAOC,KAAMC,IAAI,QAC7BrB,EAAKE,YAAYL,MADpB,W,GAhGeyB,IAAMC,WA8GxBC,GAFEnE,YAEO,e","file":"component---src-templates-blog-post-js-07df214de05b076b1a06.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n//import Image from \"gatsby-image\"\n\nimport { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  // eslint-disable-next-line\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  //const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      {/*\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      */}\n      <p>\n        Written by <strong>Matthew Reishus.</strong>\n      </p>\n      {/*\n      <p>\n        Written by <strong>{author}</strong> who lives and works in San\n        Francisco building useful things.\n        {` `}\n        <a href={`https://twitter.com/${social.twitter}`}>\n          You should follow him on Twitter\n        </a>\n      </p>\n      */}\n    </div>\n  )\n}\n\nexport default Bio\n\n/*\n          <div\n            style={{\n              display: `flex`,\n              marginBottom: rhythm(2.5),\n            }}\n          >\n\n*/\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Helmet from \"react-helmet\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nfunction waitForGlobal(name, timeout = 300) {\n  return new Promise((resolve, reject) => {\n    let waited = 0\n\n    function wait(interval) {\n      setTimeout(() => {\n        waited += interval\n        // some logic to check if script is loaded\n        // usually it something global in window object\n        if (window[name] !== undefined) {\n          return resolve()\n        }\n        if (waited >= timeout * 1000) {\n          return reject({ message: \"Timeout\" })\n        }\n        wait(interval * 2)\n      }, interval)\n    }\n\n    wait(30)\n  })\n}\n\n/* eslint-disable no-restricted-globals */\nclass BlogPostTemplate extends React.Component {\n  componentDidMount() {\n    waitForGlobal(\"MathJax\").then(() => {\n      top.MathJax.Hub.Config({\n        tex2jax: {\n          inlineMath: [[\"$\", \"$\"], [\"\\\\(\", \"\\\\)\"]],\n          displayMath: [[\"$$\", \"$$\"], [\"[\", \"]\"]],\n          processEscapes: true,\n          processEnvironments: true,\n          skipTags: [\"script\", \"noscript\", \"style\", \"textarea\", \"pre\"],\n          TeX: {\n            equationNumbers: { autoNumber: \"AMS\" },\n            extensions: [\"AMSmath.js\", \"AMSsymbols.js\"],\n          },\n        },\n      })\n    })\n    if (top.MathJax != null) {\n      top.MathJax.Hub.Queue([\"Typeset\", top.MathJax.Hub])\n    }\n  }\n\n  componentDidUpdate() {\n    if (top.MathJax != null) {\n      top.MathJax.Hub.Queue([\"Typeset\", top.MathJax.Hub])\n    }\n  }\n\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <Helmet>\n          <script\n            type=\"text/javascript\"\n            src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"\n            async\n          />\n        </Helmet>\n        <article>\n          <header>\n            <h1\n              style={{\n                marginTop: rhythm(1),\n                marginBottom: 0,\n              }}\n            >\n              {post.frontmatter.title}\n            </h1>\n            <p\n              style={{\n                ...scale(-1 / 5),\n                display: `block`,\n                marginBottom: rhythm(1),\n              }}\n            >\n              {post.frontmatter.date}\n            </p>\n          </header>\n          <section dangerouslySetInnerHTML={{ __html: post.html }} />\n          <hr\n            style={{\n              marginBottom: rhythm(1),\n            }}\n          />\n          <footer>\n            <Bio />\n          </footer>\n        </article>\n\n        <nav>\n          <ul\n            style={{\n              display: `flex`,\n              flexWrap: `wrap`,\n              justifyContent: `space-between`,\n              listStyle: `none`,\n              padding: 0,\n            }}\n          >\n            <li>\n              {previous && (\n                <Link to={previous.fields.slug} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={next.fields.slug} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}