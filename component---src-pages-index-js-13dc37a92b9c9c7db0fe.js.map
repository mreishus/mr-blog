{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/typography.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","location","_components_seo__WEBPACK_IMPORTED_MODULE_4__","map","_ref","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","gatsby__WEBPACK_IMPORTED_MODULE_2__","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","pageQuery","__webpack_require__","d","__webpack_exports__","scale","typography__WEBPACK_IMPORTED_MODULE_0__","typography","n","Typography","baseFontSize","baseLineHeight","scaleRatioOLD","scaleRatio","headerFontFamily","bodyFontFamily","headerColor","bodyColor","headerWeight","bodyWeight","boldWeight","googleFonts","name","styles","TopNav","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","Layout","header","_this$props","children","pathname","Object","assign","marginTop","textDecoration","color","fontFamily","marginLeft","marginRight","maxWidth","padding","Date","getFullYear","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","propTypes","PropTypes","string","arrayOf","object","isRequired"],"mappings":"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","file":"component---src-pages-index-js-13dc37a92b9c9c7db0fe.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </div>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","import Typography from \"typography\"\n\nconst mytheme = {\n  title: \"My Theme\",\n  baseFontSize: \"15px\",\n  baseLineHeight: 1.6,\n  scaleRatioOLD: 1.7333,\n  scaleRatio: 2,\n  headerFontFamily: [\"Libre Baskerville\", \"Georgia\", \"serif\"],\n  bodyFontFamily: [\"Libre Baskerville\", \"Georgia\", \"serif\"],\n  headerColor: \"hsla(0,0%,0%,0.87)\",\n  bodyColor: \"hsla(0,0%,0%,0.78)\",\n  headerWeight: 400,\n  bodyWeight: 400,\n  boldWeight: \"bold\",\n  googleFonts: [\n    {\n      name: \"Libre Baskerville\",\n      styles: [\"400\", \"700\"],\n    },\n  ],\n}\n\nconst typography = new Typography(mytheme)\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport { rhythm, scale } from \"../utils/typography\"\nimport \"./layout.css\"\n\nconst TopNav = () => {\n  return (\n    <nav>\n      <ol>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n      </ol>\n    </nav>\n  )\n}\n\nclass Layout extends React.Component {\n  render() {\n    const { location, title, children } = this.props\n    const rootPath = `${__PATH_PREFIX__}/`\n    let header\n\n    if (location.pathname === rootPath) {\n      header = (\n        <h1\n          style={{\n            ...scale(1.5),\n            marginBottom: rhythm(1.5),\n            marginTop: 0,\n          }}\n        >\n          <Link\n            style={{\n              boxShadow: `none`,\n              textDecoration: `none`,\n              color: `inherit`,\n            }}\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h1>\n      )\n    } else {\n      header = (\n        <h3\n          style={{\n            fontFamily: `Montserrat, sans-serif`,\n            marginTop: 0,\n          }}\n        >\n          <Link\n            style={{\n              boxShadow: `none`,\n              textDecoration: `none`,\n              color: `inherit`,\n            }}\n            to={`/`}\n          >\n            {title}\n          </Link>\n        </h3>\n      )\n    }\n    return (\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(28),\n          padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\n        }}\n      >\n        <header>\n          <TopNav />\n          {header}\n        </header>\n        <main>{children}</main>\n        <footer>\n          Â© {new Date().getFullYear()}\n          {/*, Built with {` `} <a href=\"https://www.gatsbyjs.org\">Gatsby</a> */}\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}