{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-10-19-connect-phoenix-channel-in-react-and-typescript/","result":{"data":{"site":{"siteMetadata":{"title":"MatthewReishus.com"}},"markdownRemark":{"id":"c88f3c0a-0fdf-5ccf-a5c8-d09ce4c72baf","excerpt":"Problem Description You have an application using an Elixir and Phoenix backend, and a\nTypeScript and React frontend. You’d like to use two-way communication…","html":"<h2>Problem Description</h2>\n<p>You have an application using an Elixir and Phoenix backend, and a\nTypeScript and React frontend. You’d like to use two-way communication\nbetween the frontend and backend over Phoenix’s channels using websockets.</p>\n<h2>Answer</h2>\n<p><a href=\"https://github.com/alexgriff/use-phoenix-channel\">Github alexgriff/use-phoenix-channel</a> provides\na good starting point, but it doesn’t quite work in typescript. I’ve taken this and made a few modifications\nto it:</p>\n<ol>\n<li>Ported to TypeScript.</li>\n<li>It no longer forces you to use a reducer to manage state. You provide a callback when\nmessages are received, state management is up to the caller.</li>\n</ol>\n<p>Code listing (<code class=\"language-text\">useChannel.ts</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useContext<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Socket <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"phoenix\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> SocketContext <span class=\"token keyword\">from</span> <span class=\"token string\">\"../contexts/SocketContext\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* useChannel is used to provide access to phoenix channels.\n\nexample usage showing communication in both directions:\n\ninterface Props {}\nexport const TestComponent: React.FC&lt;Props> = () => {\n  const onChannelMessage = useCallback((event, payload) => {\n    console.log(\"Got channel message from phoenix\", event, payload);\n  }, []);\n  const broadcast = useChannel(\"lobby:lobby\", onChannelMessage);\n  return (\n    &lt;button\n      onClick={() => broadcast(\"test_message_from_javascript\", { stuff: 1 })}\n    >\n      Send message to phoenix\n    &lt;/button>\n  );\n};\n\nthis is adapated from alexgriff/use-phoenix-channel with the following changes:\n1. Ported to typescript\n2. Does not force you to use a reducer.\n\nNote: It does require access to a phoenix socket object, built like so:\n\nimport { Socket } from 'phoenix';\nconst socket = new Socket(webSocketUrl, {params: options});\nsocket.connect();\n\nIt looks for this in SocketContext.  See\nhttps://medium.com/flatiron-labs/improving-ux-with-phoenix-channels-react-hooks-8e661d3a771e\nfor an example implementation.\n\n*/</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useChannel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  channelTopic<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onMessage</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> socket <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>SocketContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>broadcast<span class=\"token punctuation\">,</span> setBroadcast<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> object</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n  <span class=\"token operator\">></span><span class=\"token punctuation\">(</span>mustJoinChannelWarning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">doCleanup</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">void</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      doCleanup <span class=\"token operator\">=</span> <span class=\"token function\">joinChannel</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> channelTopic<span class=\"token punctuation\">,</span> onMessage<span class=\"token punctuation\">,</span> setBroadcast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> doCleanup<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>channelTopic<span class=\"token punctuation\">,</span> onMessage<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> broadcast<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">joinChannel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  socket<span class=\"token punctuation\">:</span> Socket<span class=\"token punctuation\">,</span>\n  channelTopic<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onMessage</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  setBroadcast<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>Dispatch<span class=\"token operator\">&lt;</span>\n    React<span class=\"token punctuation\">.</span>SetStateAction<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> object</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> channel <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span>channelTopic<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> client<span class=\"token punctuation\">:</span> <span class=\"token string\">\"browser\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  channel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onMessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// I don't think the chan_reply_ events are needed - always duplicates.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chan_reply_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Return the payload since we're using the</span>\n    <span class=\"token comment\">// special onMessage hook</span>\n    <span class=\"token keyword\">return</span> payload<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  channel\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> messages <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"successfully joined channel\"</span><span class=\"token punctuation\">,</span> messages <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> reason <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to join channel\"</span><span class=\"token punctuation\">,</span> reason<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setBroadcast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_oldstate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">eventName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> object</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>eventName<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    channel<span class=\"token punctuation\">.</span><span class=\"token function\">leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mustJoinChannelWarning</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_oldstate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">_eventName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  _payload<span class=\"token punctuation\">:</span> object</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">useChannel broadcast function cannot be invoked before the channel has been joined</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useChannel<span class=\"token punctuation\">;</span></code></pre></div>\n<p>I’ve seen this component kick off a warning in the console in some circumstances.\nI’ll be keeping an eye out for it and will update the post later when I fix it.</p>\n<p>Update 10/28/2019:  Updated the component to leave channels when unmounting\nproperly.</p>","frontmatter":{"title":"Connect to Phoenix channels using React and Typescript","date":"October 20, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-10-19-connect-phoenix-channel-in-react-and-typescript/","previous":{"fields":{"slug":"/2019-08-19-lets-encrypt-private-network/"},"frontmatter":{"title":"let's encrypt certificates for private network addresses (ex: 192.168.1.100)","templateKey":"blog-post"}},"next":null}}}