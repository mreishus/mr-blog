{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-08-19-gitlab-self-signed-docker-registry/","result":{"data":{"site":{"siteMetadata":{"title":"MatthewReishus.com"}},"markdownRemark":{"id":"3a1be3d4-8340-50d0-9372-ebb6089d81f2","excerpt":"Problem Description You run a self-hosted instance of GitLab and wish\nto add private docker container registry (storage and distribution for docker\nimages…","html":"<h2>Problem Description</h2>\n<p>You run a self-hosted instance of <a href=\"https://about.gitlab.com/\">GitLab</a> and wish\nto add private docker container registry (storage and distribution for docker\nimages inside gitlab). Your gitlab server is on a private network, so it does\nnot have a valid SSL certificate, but the container registry uses SSL.</p>\n<h2>Ensure you are not using zeroconf/avahi/mDNS.</h2>\n<p>My gitlab machine’s address was <code class=\"language-text\">gitlab.local</code>, powered by <em>avahi-daemon</em>. This\nisn’t advised, especially if you plan to generate docker images for your\nproject, which will probably use GitLab’s <a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor\">docker-in-docker\nworkflow</a>.\nThese addresses often need to be looked up inside docker images, and that’s not\neasy with avahi.</p>\n<p>Add a dns record for the machine on your router or dns server that does not use\nthe <code class=\"language-text\">.local</code> domain.  In my case, I added a dns entry for <code class=\"language-text\">gitlab.local.p</code>, but\nyou may use anything.</p>\n<h2>Create a self-signed SSL certificate</h2>\n<p>Use this command to create two files: <code class=\"language-text\">openssl req -new -newkey rsa:4096 -x509\n-sha256 -days 365 -nodes -out gitlab.local.p.crt -keyout gitlab.local.p.key</code></p>\n<p>It asks some questions.  Here is my example output with my answers.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root@gitlab /r/certs # openssl req -new -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out gitlab.local.p.crt -keyout gitlab.local.p.key\nGenerating a RSA private key\n.......................................................++++\n..............................................................................................................++++\nwriting new private key to &#39;gitlab.local.p.key&#39;\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter &#39;.&#39;, the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:TX\nLocality Name (eg, city) []:Dallas\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Homelab\nOrganizational Unit Name (eg, section) []:Gitlab\nCommon Name (e.g. server FQDN or YOUR name) []:gitlab.local.p\nEmail Address []:admin@example.com</code></pre></div>\n<p> </p>\n<h2>Copy the cert into Gitlab’s Config directory</h2>\n<p>I use a docker mounted gitlab omnibus instance, so my gitlab config files are\nin <code class=\"language-text\">/srv/gitlab/config</code>.  Copy both the <code class=\"language-text\">gitlab.local.p.crt</code> and\n<code class=\"language-text\">gitlab.local.p.key</code> files into the <code class=\"language-text\">/srv/gitlab/config/ssl/</code> directory,\ncreating it if needed.</p>\n<h2>Configure GitLab</h2>\n<p>Now, let’s turn on the registry inside gitlab and have it use our self-signed\nfiles.  Edit your <code class=\"language-text\">/srv/gitlab/config/gitlab.rb</code> file.  Here are the lines I\nset:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">registry_external_url &#39;https://gitlab.local.p:4567&#39;\n\nnginx[&#39;ssl_certificate&#39;] = &quot;/etc/gitlab/ssl/gitlab.local.p.crt&quot;\nnginx[&#39;ssl_certificate_key&#39;] = &quot;/etc/gitlab/ssl/gitlab.local.p.key&quot;\nregistry_nginx[&#39;ssl_certificate&#39;] = &quot;/etc/gitlab/ssl/gitlab.local.p.crt&quot;\nregistry_nginx[&#39;ssl_certificate_key&#39;] = &quot;/etc/gitlab/ssl/gitlab.local.p.key&quot;</code></pre></div>\n<p>Since I’m running the registry on port 4567, I needed my gitlab docker service\nto publish that port.  I edited my <code class=\"language-text\">/etc/systemd/system/docker-gitlab.service</code>\nfile and added <code class=\"language-text\">--publish 4567:4567</code> to the command line.</p>\n<p>Reconfigure/restart gitlab.</p>\n<h2>Distribute copies of the cert to other machines</h2>\n<p>If we want other computers on our local network to be able to access the docker\nregistry, they need to have a copy of the cert file in a specific location.\nOtherwise, docker will throw an error when connecting to the registry.</p>\n<p>The <code class=\"language-text\">gitlab.local.p.crt</code> needs to be placed in the directory+location\n<code class=\"language-text\">/etc/docker/certs.d/gitlab.local.p:4567/ca.crt</code> on any computer that will access\nthis registry.</p>\n<p>I added some ansible code to my docker role to make this easier:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Creates /etc/docker/certs.d/gitlab.local.p<span class=\"token punctuation\">:</span>4567 directory\n  <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /etc/docker/certs.d/gitlab.local.p<span class=\"token punctuation\">:</span><span class=\"token number\">4567</span>\n    <span class=\"token key atrule\">state</span><span class=\"token punctuation\">:</span> directory\n    <span class=\"token key atrule\">owner</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0775</span>\n    <span class=\"token key atrule\">recurse</span><span class=\"token punctuation\">:</span> yes\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> copy ca.crt\n  <span class=\"token key atrule\">copy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">src</span><span class=\"token punctuation\">:</span> ca.crt\n    <span class=\"token key atrule\">dest</span><span class=\"token punctuation\">:</span> /etc/docker/certs.d/gitlab.local.p<span class=\"token punctuation\">:</span>4567/ca.crt\n    <span class=\"token key atrule\">owner</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> root\n    <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0644</span></code></pre></div>\n<p> </p>\n<h2>Configure GitLab-Runner</h2>\n<p>Our workflow will use a <em>gitlab-runner</em> using the <em>docker</em> executor to create\ndocker images.  This is the <a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor\">docker-in-docker\nworkflow</a>.\nThere’s a few settings that need to be set in the <code class=\"language-text\">config.toml</code> file for the\ngitlab runner.</p>\n<p>Here’s the <em>runners.docker</em> section of my <code class=\"language-text\">config.toml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  [runners.docker]\n    tls_verify = false\n    image = &quot;alpine:latest&quot;\n    privileged = true\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [&quot;/cache&quot;, &quot;/certs/client&quot;]\n    shm_size = 0</code></pre></div>\n<p>I had to <strong>set privileged to true</strong> and <strong>add <code class=\"language-text\">/certs/client</code> to volumes</strong>.</p>\n<h2>Modify the default docker .gitlab-ci.yml</h2>\n<p>Our sample gitlab project is anything with a <code class=\"language-text\">Dockerfile</code> that can create an\nimage using <code class=\"language-text\">docker build</code>.  Ideally, you can use the templated version often\n<code class=\"language-text\">.gitlab-ci.yml</code> for docker that gitlab provides when clicking the “Set up\nCI/CD button”.  However, that will error out with an unknown authority message\nin this case.</p>\n<p>The error is because we’re launching a new docker image, then trying to connect\nto the repository while inside that image.  But the new image doesn’t have a\ncopy of the self-signed certificate to know that it’s valid.</p>\n<p><a href=\"https://gitlab.com/gitlab-org/gitlab-runner/issues/1350\">Here’s a long thread on gitlab.com discussing possible\nsolutions</a>.  The\nsolution that worked for me was:  Serving a copy of the certificate file on a\nlocal HTTP server, then configuring the <code class=\"language-text\">.gitlab-ci.yml</code> file to download that\nfile early in the process.  It’s dirty, but it works.</p>\n<p>For an http server, I used the built in <em>snippets</em> function inside gitlab,\nuploaded the certificate file, and set it to be accessible without\nauthentication.  This isn’t the most secure, but it is on my internal network\nonly.  </p>\n<p>Here is a modified copy of <code class=\"language-text\">.gitlab-ci.yml</code> that works for me:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># This file is a template, and might need editing before it works on your project.</span>\n<span class=\"token key atrule\">build-master</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Official docker image.</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">:</span>latest\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">:</span>dind\n      <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> /bin/sh\n        <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span>c\n        <span class=\"token punctuation\">-</span> wget http<span class=\"token punctuation\">:</span>//gitlab.local.p/snippets/1/raw <span class=\"token punctuation\">-</span>O /usr/local/share/ca<span class=\"token punctuation\">-</span>certificates/ca.crt <span class=\"token important\">&amp;&amp;</span> update<span class=\"token punctuation\">-</span>ca<span class=\"token punctuation\">-</span>certificates <span class=\"token important\">&amp;&amp;</span> dockerd<span class=\"token punctuation\">-</span>entrypoint.sh <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> exit\n  <span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> docker login <span class=\"token punctuation\">-</span>u \"$CI_REGISTRY_USER\" <span class=\"token punctuation\">-</span>p \"$CI_REGISTRY_PASSWORD\" $CI_REGISTRY\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> docker build <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>pull <span class=\"token punctuation\">-</span>t \"$CI_REGISTRY_IMAGE\" .\n    <span class=\"token punctuation\">-</span> docker push \"$CI_REGISTRY_IMAGE\"\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Official docker image.</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">:</span>latest\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> docker<span class=\"token punctuation\">:</span>dind\n  <span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> docker login <span class=\"token punctuation\">-</span>u \"$CI_REGISTRY_USER\" <span class=\"token punctuation\">-</span>p \"$CI_REGISTRY_PASSWORD\" $CI_REGISTRY\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> docker build <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>pull <span class=\"token punctuation\">-</span>t \"$CI_REGISTRY_IMAGE<span class=\"token punctuation\">:</span>$CI_COMMIT_REF_SLUG\" .\n    <span class=\"token punctuation\">-</span> docker push \"$CI_REGISTRY_IMAGE<span class=\"token punctuation\">:</span>$CI_COMMIT_REF_SLUG\"\n  <span class=\"token key atrule\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> master</code></pre></div>\n<p>In the thread, @debuglevel posted a more fleshed out <code class=\"language-text\">.gitlab-ci.yml</code> with a\nsimiliar workaround:\n<a href=\"https://gist.github.com/mreishus/bc35b3b241a9f9fdf4a021aeaabfcc5a\">gitlab-ci.yml</a>.</p>\n<p>There are other solutions posted in the thread worth trying.  Some solutions\nused a <code class=\"language-text\">CI_SERVER_TLS_CA_FILE</code> variable, which I could not get to work.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://docs.docker.com/registry/insecure/#deploying-a-plain-http-registry\">Docker: Use self-signed\ncertificates</a></li>\n<li><a href=\"https://gitlab.com/gitlab-org/gitlab-runner/issues/1350\">Gitlab.com issue thread</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/administration/container_registry.html#configure-container-registry-under-an-existing-gitlab-domain\">GitLab Container Registry\nadmin</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/user/project/container_registry.html\">GitLab Container Registry for\nprojects</a></li>\n</ul>\n<h2>An Easier Way?</h2>\n<p>As I was writing this post, I found\n<a href=\"https://community.letsencrypt.org/t/certificates-for-hosts-on-private-networks/174/35\">instructions for making let’s encrypt certificates for private domains</a>.  If it’s possible to make a valid certificate for\n<em>gitlab.yourdomain.com</em> pointing to a private address like <em>192.168.1.10</em>, this may\nbe much easier than all of the workarounds described here.</p>\n<p>Update:  This does work, and is my recommended method.  Keeping this post up,\nbut do read the next post.</p>","frontmatter":{"title":"self-hosted gitlab: adding a docker registry with a self-signed certificate","date":"August 19, 2019","description":null}}},"pageContext":{"slug":"/2019-08-19-gitlab-self-signed-docker-registry/","previous":{"fields":{"slug":"/2019-07-04-ssh-keygen/"},"frontmatter":{"title":"ssh-keygen best practice","templateKey":"blog-post"}},"next":{"fields":{"slug":"/2019-08-19-lets-encrypt-private-network/"},"frontmatter":{"title":"let's encrypt certificates for private network addresses (ex: 192.168.1.100)","templateKey":"blog-post"}}}}}