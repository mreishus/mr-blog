{"data":{"site":{"siteMetadata":{"title":"MatthewReishus.com","author":"Matthew Reishus"}},"markdownRemark":{"id":"8f7f3935-ba06-559a-a5c2-d8e18e6a28ba","excerpt":"After taking the course Practical Deep Learning For Coders\n2019, I developed a model that can classify between\nall 600 SNES games by screenshot.Intro to Part…","html":"<p>After taking the course <a href=\"https://course.fast.ai/\">Practical Deep Learning For Coders\n2019</a>, I developed a model that can classify between\nall 600 SNES games by screenshot.</p>\n<h1>Intro to Part 1</h1>\n<p>In this series, I’ll be showing how to use an off-the-shelf model mapping english words to\nvectors in your own programs.   We’ll start with a simple react application searching a dataset,\nthen use the word vector model to enhance the search.  We want to search for more than the exact\nword the user types.  For example, if I type <code class=\"language-text\">sailing</code>, perhaps we will match the words <code class=\"language-text\">boat</code>,\n<code class=\"language-text\">yacht</code>, etc.</p>\n<h1>What is a word vector?</h1>\n<p>It’s a technique used in machine learning where words are translated into a vector space.\nYou might also see it referred to as an <code class=\"language-text\">embedding</code>.  There are a few different techniques to generate these\nmappings, but that’s not the focus of this blog series.  We’ll simply be downloading a well-known\npre-trained model and use it in our application: <a href=\"https://code.google.com/archive/p/word2vec/\">GoogleNews-vectors-negative300.bin.gz</a>.</p>\n<p>This one was trained off of 100 billion words from google news and is a few years old at this point.\nYou can find many other pretrained models, some generated with different techniques online;\nhowever, I’ve had excellent results using this one.</p>\n<p>Each word is encoded as a vector in 300 dimensions.  For example, the word <code class=\"language-text\">chair</code> is represented by this array:\n<code class=\"language-text\">[0.118652, -0.375000, 0.161133, 0.002151, ...295 numbers omitted.. , 0.171875]</code>.  One interesting feature is\nthat some intuitive concepts might be embedded in simple linear transformations.  For example, perhaps adding\n<code class=\"language-text\">[0.5, 0.3, 0.6, 0, 0, 0, 0, 0....]</code> to the vector for <code class=\"language-text\">man</code> ends up being the vector for <code class=\"language-text\">woman</code>, and adding it\nto <code class=\"language-text\">king</code> gets you <code class=\"language-text\">queen</code>.  This is simplifying a bit, the <code class=\"language-text\">male-&gt;female</code> vector is not as clean as my example,\nbut it’s still a very neat result.  Here’s a graphic from google showing some linear relationships:</p>\n<p><img src=\"./wordvec-linear-relationships.png\" alt=\"Wordvec linear relationships\"></p>\n<p>I’ve explored this feature some.  I’ve found it to be impressive but a bit messy and not as clean as the diagrams.\nI haven’t found any practical use for it. (Analogy completer?)</p>\n<h1>Starting point: A simple app without any word vectors</h1>\n<p>Let’s start with a simple react app that loads a dataset in memory and lets you type to search it.<br>\nI made a quick one that searches a list of all S&#x26;P 500 companies and their descriptions.</p>\n<p><a href=\"/vector-apps/part1/\">Here is the app</a>.\n<a href=\"https://github.com/mreishus/vector-search-example/tree/02_lunr_search/front-end\">Here is the source code</a>.</p>\n<p>I made it quickly using <code class=\"language-text\">create-react-app</code>.  The CSS classes are from <a href=\"http://tachyons.io/\">tachyons</a> - they will\nlook weird if you’ve never seen them before.  It uses <a href=\"https://lunrjs.com/\">lunrjs</a> to search.</p>\n<h1>Up Next</h1>\n<p>Next, we will start building a related words service using the <a href=\"https://code.google.com/archive/p/word2vec/\">GoogleNews-vectors-negative300.bin.gz</a> model and make the app use it.</p>","frontmatter":{"title":"Visually Classifying between 600 SNES games with 94% accuracy","date":"June 03, 2019","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-06-03-snes-classifier/","previous":{"fields":{"slug":"/about/"},"frontmatter":{"title":"About Matthew Reishus","templateKey":"page"}},"next":null}}